

## Let's create the rough subprocess and test it 
import subprocess
from subprocess import CalledProcessError, TimeoutExpired
import shlex

## Parsing Module Workflow
"""

Class MinerU_Parser:

    1- Parse_user_document
    2- Run_minerU
    3- Read_minerU_output
    4- Format_the_minerU_output
    5- Run_LibreOffice
    6- Check_installations

"""

# Lets create the MinerU Parser class 

class MinerU_Parser():
    """
    This class contains the behavior of converting word-doc to pdf and parsing pdf.
    """

    # lets initialize the instance attributes
    def __init__(self,data_file_path):

        self.data_file_path = data_file_path
    

    # lets define the Run_minerU method
    def run_minerU(self):
        """
        This method takes the data file path as an input, and initiate the subprocess() that executes the external program MinerU
        to parse the provided document.

        **Args:**
        data_file_path (path): It is the file path of the user input file that minerU will parse.

        **Returns:**
        output_file_path (path): It is the path of the folder that minerU returns which contains all sort of parsed data, JSON, Markdown etc.

        **Raises:**
        It raises either CalledProcessError or TimeoutExpiredError if external programs gives error or gets hang & block indifinitely. 
        
        """
        try:
            
            # lets define the subprocess for minerU
            data_file_path = self.data_file_path

            subprocess_minerU_output = subprocess.run(shlex.split("C:\Users\Hp\AppData\Local\Programs\MinerU\MinerU.exe --path {data_file_path} --output C:\Users\Hp\Documents\AI Projects docs\RAG\Parsed_output --method auto --backend pipeline --start 0 --end 2 "),
                                            check=True,
                                            timeout=50,
                                            capture_output= True
                                            )
            
            MinerU_error = subprocess_minerU_output.stderr.decode("utf-8")
            MinerU_output = subprocess_minerU_output.stdout.decode("utf-8")

            return print(MinerU_output, MinerU_error)

        except CalledProcessError as e:
            if MinerU_error != 0:
                raise("Output of the subproces is non-zero here is the CalledProcessError {e}")
        except TimeoutExpired as e:
            if MinerU_error != 0:
                raise("Subprocess got hanged or blocked indefinitely - here is the timeoutexpired error {e}") 
       








def run_MinerU():
    """
    It takes the filepath as an input, and through the subprocess it communicates witht the
    installed MinerU, and get the document parsed. 

    **Args:** 
    Filepath (Path): It is the file path of the document as an input.
    Parsing_method (str): It is the method of parsing that we want MinerU to choose.

    **Returns:**
    Parsed_pdf (JSON): It is the JSON file that is generated by MinerU.

    **Raises:**
    It raises the error if process gets hang,blocked or gives error

    """
    try: 

        external_program = subprocess.run([r"C:\Users\Hp\AppData\Local\Programs\MinerU\mineru.exe", "--path", r"C:\Users\Hp\Documents\AI Projects docs\RAG\RAG_for_Anything.pdf", "--method", "auto" , "-s", "1" , "-e", "2", "--backend", "pipeline", "-o", r"C:\Users\Hp\Documents\AI Projects docs\RAG\Parsed_output",], check=True, capture_output=True)
        return external_program.stdout
    

    except Exception as e:
        raise Exception(f"erorr is due to {e}")

final_value = run_MinerU()
print(final_value)


